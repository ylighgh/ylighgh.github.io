=== 分布式数据库系统

==== 基本概念

分布式数据库系统 （DDBS）包含分布式数据库管理系统（DDBMS）和分布式数据库（DDB)。在分布式数据库系统中，一个应用程序可以对数据库进行透明操作，数据库中的数据分别在不同的局部数据库中存储、由不同的 DBMS进行管理、在不同的机器上运行、由不同的操作系统支持、被不同的通信网络连接在一起。

==== 分布式数据库系统工作机制

一个分布式数据库在逻辑上是一个统一的整体，在物理上则是分别存储在不同的物理节点上。一个应用程序通过网络的连接，可以访问分布在不同地理位置的数据库中。它的分布性表现在数据库中的数据不是存储在同一场地，更确切地讲，就是不存储在同一计算机的存储设备上。

==== 分布式数据库系统的特点

1.独立的透明性

2.集中节点结合

3.复制透明性

4.易于扩展性

5.适应性

6.可靠性可用性

7.充分性

8.扩展性


==== 主从数据库

.概念

MySQL 主从复制是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。MySQL 默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库，或者特定的表。

image::MySQL_原理.png[]

.优点

1.方便做数据的热备份。作为后备数据库，主数据库服务器故障后，可切换到从数据库服务器继续工作，避免数据丢失。

2.架构的扩展更容易。业务量越来越大，I/O访问频率过高，单击无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能。

3.读写分离，使数据库能支撑更大的并发。在报表中尤其重要。由于部分报表SQL语句非常的慢，导致锁表，影响前台服务。如果前台使用主库，报表使用从库，那么报表SQL将不会造成前台锁，保证了前台速度。

.常见的主从形式

.一主一从
是最基础的复制结构，用来分担之前单台数据库服务器的压力，可以进行读写分离。

image::MySQL_一主一从.png[]

.一主多从
一台 Slave 承受不住读请求压力时，可以添加多台，进行负载均衡，分散读压力。还可以对多台 Slave 进行分工，服务于不同的系统，例如一部分 Slave 负责网站前台的读请求，另一部分 Slave 负责后台统计系统的请求。因为不同系统的查询需求不同，对 Slave 分工后，可以创建不同的索引，使其更好的服务于目标系统。

image::MySQL_一主多从.png[]

.双主复制
Master 存在下线的可能，例如故障或者维护，需要把 Slave 切换为 Master。在原来的 Master 恢复可用后，由于其数据已经不是最新的了，不能再做主，需要做为 Slave 添加进来。那么就需要对其重新搭建复制环境，需要耗费一定的工作量。双主结构就是用来解决这个问题的，互相将对方作为自己的 Master，自己作为对方的 Slave 来进行复制，但对外来讲，还是一个主和一个从。当主Master 下线时，备Master 切换为 主Master，当原来的 主Master 上线后，因为他记录了自己当前复制到对方的什么位置了，就会自动从之前的位置开始重新复制，不需要人为地干预，大大提升了效率。

image::MySQL_双主复制.png[]

.级联复制
当直接从属于 Master 的 Slave 过多时，连到 Master 的 Slave I/O 线程就比较多，对 Master 的压力是很大的。级联结构就是通过减少直接从属于 Master 的 Slave 数量，减轻 Master 的压力，分散复制请求，从而提高整体的复制效率。

image::MySQL_级联复制.png[]

.双主级联
级联复制结构解决了 Slave 过多导致的瓶颈问题，但还是有单主结构中切换主时的维护问题。那么为了解决这个问题，就可以加入上面的双主结构。在必要时，可以再对 Slaves 进行分级。Mysql 的复制结构有很多种方式，复制的最大问题是数据延时，选择复制结构时需要根据自己的具体情况，并评估好目标结构的延时对系统的影响。

image::MySQL_双主级联.png[]

==== 部署主从数据库

.规划节点
[cols="10,11,12", options="规划节点"] 
|===
|IP地址 |主机名 |节点


|192.168.1.102
|mysql1
|主数据库节点


|192.168.1.105
|mysql2
|从数据库节点

|===

===== 主数据库节点配置
.主数据库节点（mysql1）配置
[source,bash]
----
#修改主机名
hostnamectl set-hostname mysql1

#关闭防火墙及SELinux服务
setenforce 0
systemctl stop firewalld

#修改/etc/hosts文件内容
cat << EOF >> /etc/hosts
192.168.1.102 mysql1
192.168.1.105 mysql2
EOF

#安装数据库服务
yum -y install mariadb mariadb-server

#启动数据库服务并设置为开机自启
systemctl start mariadb
systemctl enable mariadb

#配置数据库默认密码为000000
mysqladmin -uroot password '000000'

#备份my.cnf
cp /etc/my.cnf /etc/my.cnf.default
----

.修改主数据库节点的 `my.cnf`文件
[source, bash]
----
cat << EOF > /etc/my.cnf
[mysqld]
#记录操作日志
log_bin = mysql-bin
#不同步mysql系统数据库                            
binlog_ignore_db = mysql
#数据库集群的节点id
server_id = 2
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
# Settings user and group are ignored when systemd is used.
# If you need to run mysqld under a different user or group,
# customize your systemd unit file for mariadb according to the
# instructions in http://fedoraproject.org/wiki/Systemd

max_allowed_packet=20M
max_heap_table_size = 100M
read_buffer_size = 2M
read_rnd_buffer_size = 16M
sort_buffer_size = 8M
join_buffer_size = 8M
tmp_table_size = 100M

# 查询缓存
#query_cache_limit=4M
#query_cache_type=on
#query_cache_size=2G

# SQL执行日志
general_log=off
general_log_file=/var/log/mariadb/general.log

# SQL慢查询日志===== 验证


max_connections = 1000

# 兼容老MySQL代码，比如使用空字符串代替NULL插入数据
sql_mode = ""

[mysqld_safe]
log-error=/var/log/mariadb/mariadb.log
pid-file=/var/run/mariadb/mariadb.pid

#
# include all files from the config directory
#
!includedir /etc/my.cnf.d
EOF
----

.主数据库节点（mysql1）配置
[source,bash]
----
#重启数据库服务，使配置文件生效
systemctl restart mariadb
#授权在任何客户机上可以以root用户登录到数据库，并在主节点创建一个user用户连接节点mysql2，并赋予从节点同步主节点数据库权限
mysql -uroot -p000000 -e 'grant all privileges on *.* to "root"@"%" identified by "000000";grant replication slave on *.* to user@"mysql2" identified by "000000";flush privileges;'
----

===== 从数据库节点配置
.从数据库节点（mysql2）配置
[source,bash]
----
#修改主机名
hostnamectl set-hostname mysql2

#关闭防火墙及SELinux服务
setenforce 0
systemctl stop firewalld

#修改/etc/hosts文件内容
cat << EOF >> /etc/hosts
192.168.1.102 mysql1
192.168.1.105 mysql2
EOF

#安装数据库服务
yum -y install mariadb mariadb-server

#启动数据库服务并设置为开机自启
systemctl start mariadb
systemctl enable mariadb

#配置数据库默认密码为000000
mysqladmin -uroot password '000000'

#备份my.cnf
cp /etc/my.cnf /etc/my.cnf.default
----

.修改从数据库节点的 `my.cnf`文件
[source, bash]
----
cat << EOF > /etc/my.cnf
[mysqld]
#记录操作日志
log_bin = mysql-bin
#不同步mysql系统数据库                            
binlog_ignore_db = mysql
#数据库集群的节点id
server_id = 5
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
# Settings user and group are ignored when systemd is used.
# If you need to run mysqld under a different user or group,
# customize your systemd unit file for mariadb according to the
# instructions in http://fedoraproject.org/wiki/Systemd

max_allowed_packet=20M
max_heap_table_size = 100M
read_buffer_size = 2M
read_rnd_buffer_size = 16M
sort_buffer_size = 8M
join_buffer_size = 8M
tmp_table_size = 100M

# 查询缓存
#query_cache_limit=4M
#query_cache_type=on
#query_cache_size=2G

# SQL执行日志
general_log=off
general_log_file=/var/log/mariadb/general.log

# SQL慢查询日志
slow_query_log=off
slow_query_log_file=/var/log/mariadb/slowquery.log
long_query_time = 5

max_connections = 1000

# 兼容老MySQL代码，比如使用空字符串代替NULL插入数据
sql_mode = ""

[mysqld_safe]
log-error=/var/log/mariadb/mariadb.log
pid-file=/var/run/mariadb/mariadb.pid

#
# include all files from the config directory
#
!includedir /etc/my.cnf.d
EOF
----

.从数据库节点（mysql2）配置
[source,bash]
----
#重启数据库服务，使配置文件生效
systemctl restart mariadb
#配置从节点连接主节点的信息，并开启从节点服务
mysql -uroot -p000000 -e 'change master to master_host="mysql1",master_user="user",master_password="000000";start slave;flush privileges;'
----

===== 验证从节点服务是否开启

在从节点服务器执行命令: `mysql -uroot -p000000 -e 'show slave status\G'`,如果Slave_IO_Running和Slave_SQL_Running的状态都为YES，则节点服务开启成功
----
[root@ylighgh ~]# mysql -uroot -p000000 -e'show slave status\G'            
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: mysql1
                  Master_User: user
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 604
               Relay_Log_File: mariadb-relay-bin.000003
                Relay_Log_Pos: 529
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 604
              Relay_Log_Space: 1468
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 2

----
===== 验证数据库主从服务

.主节点创建数据库test123,并在库test123中创建company，并插入表数据,然后查看表数据
[source,bash]
mysql -uroot -p000000 -e 'create database test123;
use test123;
create table company(id int not null primary key,name varchar(50),addr varchar(255));
insert into company values(1,"alibaba","China");
select * from company;'

image::MySQL_主从验证_01.png[]

.从节点验证复制功能
[source,bash]
mysql -uroot -p000000 -e 'show databases;
use test123;
show tables;
select * from company;'

image::MySQL_主从验证_02.png[]

可以查看到主数据库中刚刚创建的库，表，信息，验证从数据库的复制功能成功

