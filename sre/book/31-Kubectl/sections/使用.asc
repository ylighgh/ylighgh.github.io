=== 使用

.获取namespaces
[source,bash]
----
kubectl get namespaces

kubectl get ns
----

.获取指定命名空间depolyments
[source,bash]
----
kubectl get deployments.apps -n kube-ops

# 输出更详细的信息
kubectl get deployments.apps -n kube-ops -o wide

kubectl get deploy -n kube-ops -o wide
----

.格式化输出
[source,bash]
----
# 只获取deployments名称
kubectl get deployments.apps -o go-template --template='{{ range .items}}{{printf "%s\n"  .metadata.name }}{{ end }}' -n kube-ops

# 获取deployments名称和副本数
kubectl get deployments.apps -o go-template --template='{{ range .items}}{{printf "%s %d\n"  .metadata.name .spec.replicas }}{{ end }}' -n kube-ops

# 获取大于指定副本数的deployments名称
kubectl get deployments.apps -o go-template --template='{{range .items}}{{if gt .spec.replicas 0}}{{.metadata.name}} {{.spec.replicas}}{{"\n"}}{{end}}{{end}}' -n kube-ops
----

.创建service
[source,bash]
----
# expose将一个资源包括Pod、Service、Deployment等公开为一个新的Service
kubectl expose deployment deployname --port=81 --type=NodePort --target-port=80 --name=service-name
----

[NOTE]
====
给deployname发布一个服务，--port为服务暴露出去的端口，--type为服务类型，--target-port为服务对应后端Pod的端口，port提供了集群内部访问服务的入口，即ClusterIP:port。
====

.修改镜像
[source,bash]
----
# 将一个deployname的image改为镜像为1.0的image
kubectl set image deploy deployname containername=containername:1.0
----

.删除资源
[source,bash]
----
kubectl delete po podname --now 
----

.回滚镜像
[source,bash]
----
# 回滚到上个版本
kubectl rollout undo deployment <deployment-name>

# 回滚到指定版本
kubectl rollout history deployment <deployment-name>
kubectl rollout undo deployment <deployment-name> --to-revision=<revision-number>
----

.扩缩容
[source,bash]
----
kubectl scale deployment deployname --replicas=newnumber
----

.重启应用
[source,bash]
----
kubectl rollout restart deployment deployname
----

.设置环境变量
[source,bash]
----
kubectl set env deployment/hephaestus KEY=VALUE -n pro
----