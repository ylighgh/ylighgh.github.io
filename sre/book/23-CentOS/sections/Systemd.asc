=== Systemd

管理目录为 `/usr/lib/systemd/system`

==== Service

.service文件
[source,bash]
----
[Unit]
Description=SD Cloud Check In

[Service]
Type=simple
ExecStart=/usr/local/bin/python38 /root/workspace/66yunCheckIn/app.py

[Install]
WantedBy=multi-user.target
----

*_参数说明_*

https://www.freedesktop.org/software/systemd/man/systemd.unit.html[官方文档]

*[Unit]*

[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系
  
  Description：简短描述
  Documentation：文档地址
  Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败
  Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败
  BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行
  Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动
  After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动
  Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行
  Condition...：当前 Unit 运行必须满足的条件，否则不会运行
  Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败

*[Service]*

[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块

  Type：定义启动时的进程行为。它有以下几种值。
  Type=simple：默认值，执行ExecStart指定的命令，启动主进程
  Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出
  Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行
  Type=dbus：当前服务通过D-Bus启动
  Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行
  Type=idle：若有其他任务执行完毕，当前服务才会运行
  ExecStart：启动当前服务的命令
  ExecStartPre：启动当前服务之前执行的命令
  ExecStartPost：启动当前服务之后执行的命令
  ExecReload：重启当前服务时执行的命令
  ExecStop：停止当前服务时执行的命令
  ExecStopPost：停止当其服务之后执行的命令
  RestartSec：自动重启当前服务间隔的秒数
  Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog
  TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数
  Environment：指定环境变量

*[Install]*

[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动

  WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中
  RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中
  Alias：当前 Unit 可用于启动的别名
  Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit


==== Timer

.Timer文件
[source,bash]
----
[Unit]
Description=SD Cloud CheckIn

[Timer]
OnCalendar=*-*-* 09:00:00

[Install]
WantedBy=multi-user.target
----

*_参数说明_*

https://www.freedesktop.org/software/systemd/man/systemd.time.html[官方文档]

*[Timer]*

[Timer]部分定制定时器

  OnActiveSec：定时器生效后，多少时间开始执行任务
  OnBootSec：系统启动后，多少时间开始执行任务
  OnStartupSec：Systemd 进程启动后，多少时间开始执行任务
  OnUnitActiveSec：该单元上次执行后，等多少时间再次执行
  OnUnitInactiveSec： 定时器上次关闭后多少时间，再次执行
  OnCalendar：基于绝对时间，而不是相对时间执行
  AccuracySec：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒
  Unit：真正要执行的任务，默认是同名的带有.service后缀的单元
  Persistent：如果设置了该字段，即使定时器到时没有启动，也会自动执行相应的单元
  WakeSystem：如果系统休眠，是否自动唤醒系统


OnCalendar详细说明
[TIP]
====
    minutely → *-*-* *:*:00
      hourly → *-*-* *:00:00
       daily → *-*-* 00:00:00
     monthly → *-*-01 00:00:00
      weekly → Mon *-*-* 00:00:00
      yearly → *-01-01 00:00:00
   quarterly → *-01,04,07,10-01 00:00:00
semiannually → *-01,07-01 00:00:00
====

==== 使用

.启动service
[source,bash]
----
# 修改服务文件后重载服务
systemctl daemon-reload
# 启动 checkin.service
systemctl start checkin
# 查看服务状态
systemctl status checkin
# 增加开机自启
systemctl enable checkin
----

.启动timer
[source,bash]
----
# 启动 checkin.timer
systemctl start checkin.timer
# 查看所有已启用的定时器
systemctl list-timers
# 增加开机自启
systemctl enable checkin.timer
# 重启 checkin.timer
systemctl restart checkin.timer
----
