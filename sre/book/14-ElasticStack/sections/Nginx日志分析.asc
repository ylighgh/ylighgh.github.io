=== Nginx日志分析

.Nginx日志格式
[source,bash]
----
log_format  main  '$host $server_port $remote_addr - $remote_user [$time_local] "$request" '
                '$status $request_time $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';
----

https://www.elastic.co/guide/en/kibana/7.14/xpack-grokdebugger.html[Gork表达式]

==== FileBeat实时导入

Filebeat会把日志传送到Logstash，Logstash再把日志传到ES

.安装
[source,bash]
----
curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.17.4-x86_64.rpm
rpm -vi filebeat-7.17.4-x86_64.rpm
----

.配置
[source,bash]
----
sed -i '7s/#server.host: "localhost"/server.host: "0.0.0.0"/' /etc/kibana/kibana.yml
sed -i '28s/false/true/' /etc/filebeat/filebeat.yml
sed -i '32s/*.log/nginx\/access*.log/' /etc/filebeat/filebeat.yml
sed -i '135s/^/#/' /etc/filebeat/filebeat.yml
sed -i '137s/^/#/' /etc/filebeat/filebeat.yml
sed -i '148s/#//' /etc/filebeat/filebeat.yml
sed -i '150s/#//' /etc/filebeat/filebeat.yml
sed -i '67s/#//' /etc/filebeat/filebeat.yml
sed -i '150s/localhost:5044/127.0.0.1:5400/' /etc/filebeat/filebeat.yml 
----

.开机启动
[source,bash]
----
systemctl enable filebeat
----

.启动服务
[source,bash]
----
systemctl start filebeat
----

.Nginx日志格式
[source,bash]
----
log_format  main   '$host $server_port $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $request_time $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
----


.验证
[source,bash]
----
cat <<EOF> /etc/logstash/conf.d/nginx-es.conf
input {
        beats {
                host => "0.0.0.0"
                port => 5400	# 对应在filebeat的配置中，output到logstash的5400端口
        }
}
filter{
        grok{
                match => { "message" => "%{IPORHOST:host_ip} %{NUMBER:server_port} %{IPORHOST:remote_ip} - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"%{WORD:request_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:request_time} %{NUMBER:body_bytes_sent} \"%{DATA:http_referrer}\" \"%{DATA:http_user_agent}\"" }
        }
        date {
                match => [ "time_local", "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
}
output {
        elasticsearch { 
                hosts => ["0.0.0.0:9200"] 
                index => "nginx_es-%{+YYYY.MM.dd}"
        }
}
EOF

# 检查配置文件语法是否有错误
/usr/share/logstash/bin/logstash --config.test_and_exit -f nginx-es.conf
----

.启动logstash服务
[source,bash]
----
systemctl start logstash
----

.查看索引
[source,bash]
----
curl -s "127.0.0.1:9200/_cat/indices?v"
yellow open   nginx_es-2022.05.27     RPDzQQbARqWXNzaCvxsI2w   1   1         33            0     32.6kb         32.6kb
检查ES内容，发现ES已自动创建索引nginx_es-2022.05.27并且已经有Nginx日志内容
curl -XGET '127.0.0.1:9200/nginx_es-2022.05.27/_doc/_search/?pretty'
----

==== Nginx日志普通导入

**准备日志文件**

日志文件存放路径: `~/es_log/nginx_logs`

.配置文件
[source,bash]
----
mkdir -p ~/es_log/nginx_logs

cat << EOF > ~/es_log/logstash.conf
input{
  file {
    path => "${HOME}/es_log/nginx_logs/access.log*"
    type => "nginx_access"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    stat_interval => "1 second"
  }
}
filter{
        grok{
                match => { "message" => "%{IPORHOST:host_ip} %{NUMBER:server_port} %{IPORHOST:remote_ip} - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"%{WORD:request_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:request_time} %{NUMBER:body_bytes_sent} \"%{DATA:http_referrer}\" \"%{DATA:http_user_agent}\"" }
        }
}
output {
        elasticsearch { 
                hosts => ["0.0.0.0:9200"] 
                index => "nginx_es_log-%{+YYYY.MM.dd}"
        }
        #file  {
        #    path => "/var/log/logstash.log"
        #    codec => json
        #}
}
EOF
----

.导入数据到ES：
[source,bash]
----
/usr/share/logstash/bin/logstash -f ~/es_log/logstash.conf
----