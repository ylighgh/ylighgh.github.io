=== Nginx反代GitLab

安装GitLab之后，通过单独的Nginx反代，暴露给外网访问。由于Nginx配置和GitLab内部的访问端口不同，为保证功能正常使用，需要修改GitLab配置

==== GitLab设置
[source,bash]
----
# 禁用默认配置
sed -i 's/^external_url /#external_url /g' /etc/gitlab/gitlab.rb

cat << EOF >> /etc/gitlab/gitlab.rb
# Git SSH Clone相关参数
gitlab_rails['gitlab_ssh_host'] = 'git.xxx.com'

# 禁用自动签发免费HTTPS证书
# letsencrypt['enable'] = false

# 禁用签发证书后，需要显式启用Nginx服务
nginx['enable'] = true
# 禁用Nginx的HTTPS配置
nginx['redirect_http_to_https'] = false
nginx['listen_https'] = false

# Nginx端口监听配置
nginx['listen_addresses'] = ['127.0.0.1']
nginx['listen_port'] = 8000

git_data_dirs({
    "default" => {
        "path" => "/data/gitlab_data"
    }
})
EOF

# 重新生成配置并重启
gitlab-ctl reconfigure && gitlab-ctl restart

# 确认Nginx服务状态
ss -antpl|grep 8000
----

==== Nginx Server配置

[source,bash]
----
cat <<EOF> /etc/nginx/conf.d/gitlab.conf
server {
    listen 2035 ssl http2;
    server_name git.xxx.com;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/letsencrypt/live/xxx.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/xxx.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/letsencrypt/live/xxx.com/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # 替换URL，解决README.md之类无法加载的问题
    sub_filter 'http://git.xxx.com'  'https://git.xxx.com';
    sub_filter_once off;
    sub_filter_last_modified on;
    # 替换 text/html application/json HTTP响应包中的内容
    sub_filter_types application/json;

    location / {
        auth_basic           "Administrator’s Area";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # 必须设置，否则新建项目后，会302跳转到http的80端口
        proxy_set_header Host git.xxx.com:2035;
        proxy_set_header X-Real-IP \$remote_addr;
        #proxy_set_header X-Forwarded-Proto https;

        proxy_pass http://127.0.0.1:8000;
    }

    location ~ ^/\.git/? {
        return 404;
    }
}
EOF
----

.生效Nginx配置
[source,bash]
----
nginx -t && nginx -s reload
----

==== 设置HTTP Clone相关参数

用管理员帐号登录GitLab，进入以下菜单：

`Admin Area` > `Settings` > `General` > `Visibility and access controls`

找到 `Custom Git clone URL for HTTP(S)`，根据实际情况填写，比如：`https://git.xxx.com:2035`

==== 最后

外网GitLab访问地址
https://git.xxx.com

SSH克隆地址
ssh://git@git.xxx.com/用户名/项目名称.git

HTTP克隆地址
https://git.xxx.com:2035/用户名/项目名称.git


