=== PipeLine

[source,bash]
----
// 所有脚本命令都放在pipeline
pipeline{
    // 指定任务构建在哪个集群执行
    agent any
    
    // 声明全局变量
    environment{
        Harbor_User = 'admin'
        Harbor_PassWord = 'Nuttertools123..'
        Harbor_Addr = '192.168.0.150:80'
        Harbor_Repo = 'repo'
    }


    stages {
        stage('拉取git仓库代码') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '${tag}']], extensions: [], userRemoteConfigs: [[url: 'https://git.yssuvu.xyz:2035/root/mytest.git']]])
                echo '拉取git仓库代码 - SUCCESS'
            }
        }
        stage('通过maven构建代码') {
            steps {
                sh 'mvn clean package -DskipTests'
                echo '通过maven构建代码 - SUCCESS'
            }
        }
        stage('通过Docker指定自定义镜像') {
            steps {
                sh '''mv ./target/*.jar ./docker/
                docker build -t ${JOB_NAME}:${tag} ./docker/'''
                echo '通过Docker指定自定义镜像 - SUCCESS'
            }
        }
        stage('将自定义镜像推送到Harbor') {
            steps {
                sh '''docker login -u ${Harbor_User} -p ${Harbor_PassWord} ${Harbor_Addr}
                docker tag ${JOB_NAME}:${tag} ${Harbor_Addr}/${Harbor_Repo}/${JOB_NAME}:${tag}
                docker push ${Harbor_Addr}/${Harbor_Repo}/${JOB_NAME}:${tag}'''
                echo '将自定义镜像推送到Harbor - SUCCESS'
            }
        }
        stage('通过Publish Over SSH通知目标服务器') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'test', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "deploy.sh ${Harbor_Addr} ${Harbor_Repo} ${JOB_NAME} ${tag} ${port}", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                echo '通过Publish Over SSH通知目标服务器 - SUCCESS'
            }
        }
    }
    post{
        success{
            dingtalk(
                robot: 'Jenkins-robot',
                type: 'MARKDOWN',
                title: "success:${JOB_NAME}",
                text:["- 成功构建:${JOB_NAME}\n- 版本:${tag} \n- 持续时间:${currentBuild.durationString}"]
            )
        }
        failure{
            dingtalk(
                robot: 'Jenkins-robot',
                type: 'MARKDOWN',
                title: "failure:${JOB_NAME}",
                text:["- 构建失败:${JOB_NAME}\n- 版本:${tag} \n- 持续时间:${currentBuild.durationString}"]
            )
        }
    }
}
----
